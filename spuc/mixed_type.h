#ifndef SPUC_MIXED_TYPE
#define SPUC_MIXED_TYPE

/*
    Copyright (C) 2014 Tony Kirke

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
// from directory: spuc_traits
#include <spuc/spuc_types.h>
namespace SPUC {
//! This file is automatically generated.......
//! \file
//! \brief Determine resultant type when mixing two types in math operations
//
//! \brief Determine resultant type when mixing two types in math operations
//! \author Tony Kirke,  Copyright(c) 2005
//! \author Tony Kirke
//! \ingroup traits traits
//
// This template is used to look at two types used together
// in some mathematical expression
// and then figure out the correct type for the result of
// the math expression
// For example (addition)
// input types                       Result type
// double + double                   = double
// double + long                     = double
// double + complex<double>          = complex<double>
// double + complex<long>            = complex<double>
// long   + long                     = long
// long   + complex<double>          = complex<double>
// long   + complex<long>            = complex<long>
// complex<double> + complex<double> = complex<double>
// complex<double> + complex<long>   = complex<double>
// complex<long>   + complex<long>   = complex<long>
template <typename T, typename D=double> class mixed_type {
public:
  typedef double dtype;
};
#define MIXED_MACRO( T1, T2, RESULT )		template <> class mixed_type<T1,T2 > {      public:                                       typedef RESULT dtype;                     };                                          
#define DMIXED_MACRO( T1, T2, RESULT )		template <> class mixed_type<T1,T2 > {      public:                                       typedef RESULT dtype;                     };                                          template <> class mixed_type<T2,T1 > {      public:                                       typedef RESULT dtype;                     };                                          
//----------------------------------------------------------
template <typename T, long D> class mixed_type<T,sint<D> > {
 public:
  typedef T dtype;
};
template <long T, long D> class mixed_type<sint<T>,sint<D> > {
 public:
  typedef int_s dtype;
};

MIXED_MACRO(long,long,long)
DMIXED_MACRO(long,int,long)
DMIXED_MACRO(long,double,double)
DMIXED_MACRO(long,float,float)
DMIXED_MACRO(long,vfixed,long)
DMIXED_MACRO(long,int_s,long)
DMIXED_MACRO(long,vfloat,long)
DMIXED_MACRO(long,vlog,long)
DMIXED_MACRO(long,fxd,long)
MIXED_MACRO(int,int,int)
DMIXED_MACRO(int,double,double)
DMIXED_MACRO(int,float,float)
DMIXED_MACRO(int,vfixed,int)
DMIXED_MACRO(int,int_s,int)
DMIXED_MACRO(int,vfloat,int)
DMIXED_MACRO(int,vlog,int)
DMIXED_MACRO(int,fxd,int)
MIXED_MACRO(double,double,double)
DMIXED_MACRO(double,float,double)
DMIXED_MACRO(double,vfixed,double)
DMIXED_MACRO(double,int_s,double)
DMIXED_MACRO(double,vfloat,double)
DMIXED_MACRO(double,vlog,double)
DMIXED_MACRO(double,fxd,double)
MIXED_MACRO(float,float,float)
DMIXED_MACRO(float,vfixed,float)
DMIXED_MACRO(float,int_s,float)
DMIXED_MACRO(float,vfloat,float)
DMIXED_MACRO(float,vlog,float)
DMIXED_MACRO(float,fxd,float)
MIXED_MACRO(vfixed,vfixed,vfixed)
DMIXED_MACRO(vfixed,int_s,vfixed)
DMIXED_MACRO(vfixed,vfloat,vfloat)
DMIXED_MACRO(vfixed,vlog,vlog)
DMIXED_MACRO(vfixed,fxd,fxd)
MIXED_MACRO(int_s,int_s,int_s)
DMIXED_MACRO(int_s,vfloat,vfloat)
DMIXED_MACRO(int_s,vlog,vlog)
DMIXED_MACRO(int_s,fxd,fxd)
MIXED_MACRO(vfloat,vfloat,vfloat)
DMIXED_MACRO(vfloat,vlog,vfloat)
DMIXED_MACRO(vfloat,fxd,vfloat)
MIXED_MACRO(vlog,vlog,vlog)
DMIXED_MACRO(vlog,fxd,vlog)
MIXED_MACRO(fxd,fxd,fxd)
MIXED_MACRO(complex<long>,complex<long>,complex<long>)
DMIXED_MACRO(complex<long>,complex<int>,complex<long>)
DMIXED_MACRO(complex<long>,complex<double>,complex<double>)
DMIXED_MACRO(complex<long>,complex<float>,complex<float>)
DMIXED_MACRO(complex<long>,complex<vfixed>,complex<long>)
DMIXED_MACRO(complex<long>,complex<int_s>,complex<long>)
DMIXED_MACRO(complex<long>,complex<vfloat>,complex<long>)
DMIXED_MACRO(complex<long>,complex<vlog>,complex<long>)
DMIXED_MACRO(complex<long>,complex<fxd>,complex<long>)
MIXED_MACRO(complex<int>,complex<int>,complex<int>)
DMIXED_MACRO(complex<int>,complex<double>,complex<double>)
DMIXED_MACRO(complex<int>,complex<float>,complex<float>)
DMIXED_MACRO(complex<int>,complex<vfixed>,complex<int>)
DMIXED_MACRO(complex<int>,complex<int_s>,complex<int>)
DMIXED_MACRO(complex<int>,complex<vfloat>,complex<int>)
DMIXED_MACRO(complex<int>,complex<vlog>,complex<int>)
DMIXED_MACRO(complex<int>,complex<fxd>,complex<int>)
MIXED_MACRO(complex<double>,complex<double>,complex<double>)
DMIXED_MACRO(complex<double>,complex<float>,complex<double>)
DMIXED_MACRO(complex<double>,complex<vfixed>,complex<double>)
DMIXED_MACRO(complex<double>,complex<int_s>,complex<double>)
DMIXED_MACRO(complex<double>,complex<vfloat>,complex<double>)
DMIXED_MACRO(complex<double>,complex<vlog>,complex<double>)
DMIXED_MACRO(complex<double>,complex<fxd>,complex<double>)
MIXED_MACRO(complex<float>,complex<float>,complex<float>)
DMIXED_MACRO(complex<float>,complex<vfixed>,complex<float>)
DMIXED_MACRO(complex<float>,complex<int_s>,complex<float>)
DMIXED_MACRO(complex<float>,complex<vfloat>,complex<float>)
DMIXED_MACRO(complex<float>,complex<vlog>,complex<float>)
DMIXED_MACRO(complex<float>,complex<fxd>,complex<float>)
MIXED_MACRO(complex<vfixed>,complex<vfixed>,complex<vfixed>)
DMIXED_MACRO(complex<vfixed>,complex<int_s>,complex<vfixed>)
DMIXED_MACRO(complex<vfixed>,complex<vfloat>,complex<vfloat>)
DMIXED_MACRO(complex<vfixed>,complex<vlog>,complex<vlog>)
DMIXED_MACRO(complex<vfixed>,complex<fxd>,complex<fxd>)
MIXED_MACRO(complex<int_s>,complex<int_s>,complex<int_s>)
DMIXED_MACRO(complex<int_s>,complex<vfloat>,complex<vfloat>)
DMIXED_MACRO(complex<int_s>,complex<vlog>,complex<vlog>)
DMIXED_MACRO(complex<int_s>,complex<fxd>,complex<fxd>)
MIXED_MACRO(complex<vfloat>,complex<vfloat>,complex<vfloat>)
DMIXED_MACRO(complex<vfloat>,complex<vlog>,complex<vfloat>)
DMIXED_MACRO(complex<vfloat>,complex<fxd>,complex<vfloat>)
MIXED_MACRO(complex<vlog>,complex<vlog>,complex<vlog>)
DMIXED_MACRO(complex<vlog>,complex<fxd>,complex<vlog>)
MIXED_MACRO(complex<fxd>,complex<fxd>,complex<fxd>)
DMIXED_MACRO(complex<long>,long,complex<long>)
DMIXED_MACRO(complex<long>,int,complex<long>)
DMIXED_MACRO(complex<long>,double,complex<double>)
DMIXED_MACRO(complex<long>,float,complex<float>)
DMIXED_MACRO(complex<long>,vfixed,complex<long>)
DMIXED_MACRO(complex<long>,int_s,complex<long>)
DMIXED_MACRO(complex<long>,vfloat,complex<long>)
DMIXED_MACRO(complex<long>,vlog,complex<long>)
DMIXED_MACRO(complex<long>,fxd,complex<long>)
DMIXED_MACRO(complex<int>,long,complex<long>)
DMIXED_MACRO(complex<int>,int,complex<int>)
DMIXED_MACRO(complex<int>,double,complex<double>)
DMIXED_MACRO(complex<int>,float,complex<float>)
DMIXED_MACRO(complex<int>,vfixed,complex<int>)
DMIXED_MACRO(complex<int>,int_s,complex<int>)
DMIXED_MACRO(complex<int>,vfloat,complex<int>)
DMIXED_MACRO(complex<int>,vlog,complex<int>)
DMIXED_MACRO(complex<int>,fxd,complex<int>)
DMIXED_MACRO(complex<double>,long,complex<double>)
DMIXED_MACRO(complex<double>,int,complex<double>)
DMIXED_MACRO(complex<double>,double,complex<double>)
DMIXED_MACRO(complex<double>,float,complex<double>)
DMIXED_MACRO(complex<double>,vfixed,complex<double>)
DMIXED_MACRO(complex<double>,int_s,complex<double>)
DMIXED_MACRO(complex<double>,vfloat,complex<double>)
DMIXED_MACRO(complex<double>,vlog,complex<double>)
DMIXED_MACRO(complex<double>,fxd,complex<double>)
DMIXED_MACRO(complex<float>,long,complex<float>)
DMIXED_MACRO(complex<float>,int,complex<float>)
DMIXED_MACRO(complex<float>,double,complex<double>)
DMIXED_MACRO(complex<float>,float,complex<float>)
DMIXED_MACRO(complex<float>,vfixed,complex<float>)
DMIXED_MACRO(complex<float>,int_s,complex<float>)
DMIXED_MACRO(complex<float>,vfloat,complex<float>)
DMIXED_MACRO(complex<float>,vlog,complex<float>)
DMIXED_MACRO(complex<float>,fxd,complex<float>)
DMIXED_MACRO(complex<vfixed>,long,complex<long>)
DMIXED_MACRO(complex<vfixed>,int,complex<int>)
DMIXED_MACRO(complex<vfixed>,double,complex<double>)
DMIXED_MACRO(complex<vfixed>,float,complex<float>)
DMIXED_MACRO(complex<vfixed>,vfixed,complex<vfixed>)
DMIXED_MACRO(complex<vfixed>,int_s,complex<vfixed>)
DMIXED_MACRO(complex<vfixed>,vfloat,complex<vfloat>)
DMIXED_MACRO(complex<vfixed>,vlog,complex<vlog>)
DMIXED_MACRO(complex<vfixed>,fxd,complex<fxd>)
DMIXED_MACRO(complex<int_s>,long,complex<long>)
DMIXED_MACRO(complex<int_s>,int,complex<int>)
DMIXED_MACRO(complex<int_s>,double,complex<double>)
DMIXED_MACRO(complex<int_s>,float,complex<float>)
DMIXED_MACRO(complex<int_s>,vfixed,complex<vfixed>)
DMIXED_MACRO(complex<int_s>,int_s,complex<int_s>)
DMIXED_MACRO(complex<int_s>,vfloat,complex<vfloat>)
DMIXED_MACRO(complex<int_s>,vlog,complex<vlog>)
DMIXED_MACRO(complex<int_s>,fxd,complex<fxd>)
DMIXED_MACRO(complex<vfloat>,long,complex<long>)
DMIXED_MACRO(complex<vfloat>,int,complex<int>)
DMIXED_MACRO(complex<vfloat>,double,complex<double>)
DMIXED_MACRO(complex<vfloat>,float,complex<float>)
DMIXED_MACRO(complex<vfloat>,vfixed,complex<vfloat>)
DMIXED_MACRO(complex<vfloat>,int_s,complex<vfloat>)
DMIXED_MACRO(complex<vfloat>,vfloat,complex<vfloat>)
DMIXED_MACRO(complex<vfloat>,vlog,complex<vfloat>)
DMIXED_MACRO(complex<vfloat>,fxd,complex<vfloat>)
DMIXED_MACRO(complex<vlog>,long,complex<long>)
DMIXED_MACRO(complex<vlog>,int,complex<int>)
DMIXED_MACRO(complex<vlog>,double,complex<double>)
DMIXED_MACRO(complex<vlog>,float,complex<float>)
DMIXED_MACRO(complex<vlog>,vfixed,complex<vlog>)
DMIXED_MACRO(complex<vlog>,int_s,complex<vlog>)
DMIXED_MACRO(complex<vlog>,vfloat,complex<vfloat>)
DMIXED_MACRO(complex<vlog>,vlog,complex<vlog>)
DMIXED_MACRO(complex<vlog>,fxd,complex<vlog>)
DMIXED_MACRO(complex<fxd>,long,complex<long>)
DMIXED_MACRO(complex<fxd>,int,complex<int>)
DMIXED_MACRO(complex<fxd>,double,complex<double>)
DMIXED_MACRO(complex<fxd>,float,complex<float>)
DMIXED_MACRO(complex<fxd>,vfixed,complex<fxd>)
DMIXED_MACRO(complex<fxd>,int_s,complex<fxd>)
DMIXED_MACRO(complex<fxd>,vfloat,complex<vfloat>)
DMIXED_MACRO(complex<fxd>,vlog,complex<vlog>)
DMIXED_MACRO(complex<fxd>,fxd,complex<fxd>)

#undef DMIXED_MACRO
#undef  MIXED_MACRO
} // namespace SPUC
#endif
